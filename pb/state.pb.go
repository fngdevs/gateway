// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: state.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StateClient is the client API for State service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StateClient interface {
	SetChannel(ctx context.Context, in *SetChannelRequest, opts ...grpc.CallOption) (*SetChannelResponse, error)
	GetChannel(ctx context.Context, in *GetChannelRequest, opts ...grpc.CallOption) (*GetChannelResponse, error)
	SetEmoji(ctx context.Context, in *SetEmojiRequest, opts ...grpc.CallOption) (*SetEmojiResponse, error)
	GetEmoji(ctx context.Context, in *GetEmojiRequest, opts ...grpc.CallOption) (*GetEmojiResponse, error)
	SetGuild(ctx context.Context, in *SetGuildRequest, opts ...grpc.CallOption) (*SetGuildResponse, error)
	GetGuild(ctx context.Context, in *GetGuildRequest, opts ...grpc.CallOption) (*GetGuildResponse, error)
	SetMember(ctx context.Context, in *SetMemberRequest, opts ...grpc.CallOption) (*SetMemberResponse, error)
	GetMember(ctx context.Context, in *GetMemberRequest, opts ...grpc.CallOption) (*GetMemberResponse, error)
	SetUser(ctx context.Context, in *SetUserRequest, opts ...grpc.CallOption) (*SetUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	SetMessage(ctx context.Context, in *SetMessageRequest, opts ...grpc.CallOption) (*SetMessageResponse, error)
	GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error)
	SetRole(ctx context.Context, in *SetRoleRequest, opts ...grpc.CallOption) (*SetRoleResponse, error)
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error)
}

type stateClient struct {
	cc *grpc.ClientConn
}

func NewStateClient(cc *grpc.ClientConn) StateClient {
	return &stateClient{cc}
}

func (c *stateClient) SetChannel(ctx context.Context, in *SetChannelRequest, opts ...grpc.CallOption) (*SetChannelResponse, error) {
	out := new(SetChannelResponse)
	err := c.cc.Invoke(ctx, "/state.State/SetChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) GetChannel(ctx context.Context, in *GetChannelRequest, opts ...grpc.CallOption) (*GetChannelResponse, error) {
	out := new(GetChannelResponse)
	err := c.cc.Invoke(ctx, "/state.State/GetChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) SetEmoji(ctx context.Context, in *SetEmojiRequest, opts ...grpc.CallOption) (*SetEmojiResponse, error) {
	out := new(SetEmojiResponse)
	err := c.cc.Invoke(ctx, "/state.State/SetEmoji", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) GetEmoji(ctx context.Context, in *GetEmojiRequest, opts ...grpc.CallOption) (*GetEmojiResponse, error) {
	out := new(GetEmojiResponse)
	err := c.cc.Invoke(ctx, "/state.State/GetEmoji", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) SetGuild(ctx context.Context, in *SetGuildRequest, opts ...grpc.CallOption) (*SetGuildResponse, error) {
	out := new(SetGuildResponse)
	err := c.cc.Invoke(ctx, "/state.State/SetGuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) GetGuild(ctx context.Context, in *GetGuildRequest, opts ...grpc.CallOption) (*GetGuildResponse, error) {
	out := new(GetGuildResponse)
	err := c.cc.Invoke(ctx, "/state.State/GetGuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) SetMember(ctx context.Context, in *SetMemberRequest, opts ...grpc.CallOption) (*SetMemberResponse, error) {
	out := new(SetMemberResponse)
	err := c.cc.Invoke(ctx, "/state.State/SetMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) GetMember(ctx context.Context, in *GetMemberRequest, opts ...grpc.CallOption) (*GetMemberResponse, error) {
	out := new(GetMemberResponse)
	err := c.cc.Invoke(ctx, "/state.State/GetMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) SetUser(ctx context.Context, in *SetUserRequest, opts ...grpc.CallOption) (*SetUserResponse, error) {
	out := new(SetUserResponse)
	err := c.cc.Invoke(ctx, "/state.State/SetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/state.State/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) SetMessage(ctx context.Context, in *SetMessageRequest, opts ...grpc.CallOption) (*SetMessageResponse, error) {
	out := new(SetMessageResponse)
	err := c.cc.Invoke(ctx, "/state.State/SetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error) {
	out := new(GetMessageResponse)
	err := c.cc.Invoke(ctx, "/state.State/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) SetRole(ctx context.Context, in *SetRoleRequest, opts ...grpc.CallOption) (*SetRoleResponse, error) {
	out := new(SetRoleResponse)
	err := c.cc.Invoke(ctx, "/state.State/SetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stateClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error) {
	out := new(GetRoleResponse)
	err := c.cc.Invoke(ctx, "/state.State/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateServer is the server API for State service.
type StateServer interface {
	SetChannel(context.Context, *SetChannelRequest) (*SetChannelResponse, error)
	GetChannel(context.Context, *GetChannelRequest) (*GetChannelResponse, error)
	SetEmoji(context.Context, *SetEmojiRequest) (*SetEmojiResponse, error)
	GetEmoji(context.Context, *GetEmojiRequest) (*GetEmojiResponse, error)
	SetGuild(context.Context, *SetGuildRequest) (*SetGuildResponse, error)
	GetGuild(context.Context, *GetGuildRequest) (*GetGuildResponse, error)
	SetMember(context.Context, *SetMemberRequest) (*SetMemberResponse, error)
	GetMember(context.Context, *GetMemberRequest) (*GetMemberResponse, error)
	SetUser(context.Context, *SetUserRequest) (*SetUserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	SetMessage(context.Context, *SetMessageRequest) (*SetMessageResponse, error)
	GetMessage(context.Context, *GetMessageRequest) (*GetMessageResponse, error)
	SetRole(context.Context, *SetRoleRequest) (*SetRoleResponse, error)
	GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error)
}

func RegisterStateServer(s *grpc.Server, srv StateServer) {
	s.RegisterService(&_State_serviceDesc, srv)
}

func _State_SetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).SetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/state.State/SetChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).SetChannel(ctx, req.(*SetChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_GetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).GetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/state.State/GetChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).GetChannel(ctx, req.(*GetChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_SetEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEmojiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).SetEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/state.State/SetEmoji",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).SetEmoji(ctx, req.(*SetEmojiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_GetEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmojiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).GetEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/state.State/GetEmoji",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).GetEmoji(ctx, req.(*GetEmojiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_SetGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).SetGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/state.State/SetGuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).SetGuild(ctx, req.(*SetGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_GetGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).GetGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/state.State/GetGuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).GetGuild(ctx, req.(*GetGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_SetMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).SetMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/state.State/SetMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).SetMember(ctx, req.(*SetMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_GetMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).GetMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/state.State/GetMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).GetMember(ctx, req.(*GetMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_SetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).SetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/state.State/SetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).SetUser(ctx, req.(*SetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/state.State/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_SetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).SetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/state.State/SetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).SetMessage(ctx, req.(*SetMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/state.State/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).GetMessage(ctx, req.(*GetMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_SetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).SetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/state.State/SetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).SetRole(ctx, req.(*SetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _State_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/state.State/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _State_serviceDesc = grpc.ServiceDesc{
	ServiceName: "state.State",
	HandlerType: (*StateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetChannel",
			Handler:    _State_SetChannel_Handler,
		},
		{
			MethodName: "GetChannel",
			Handler:    _State_GetChannel_Handler,
		},
		{
			MethodName: "SetEmoji",
			Handler:    _State_SetEmoji_Handler,
		},
		{
			MethodName: "GetEmoji",
			Handler:    _State_GetEmoji_Handler,
		},
		{
			MethodName: "SetGuild",
			Handler:    _State_SetGuild_Handler,
		},
		{
			MethodName: "GetGuild",
			Handler:    _State_GetGuild_Handler,
		},
		{
			MethodName: "SetMember",
			Handler:    _State_SetMember_Handler,
		},
		{
			MethodName: "GetMember",
			Handler:    _State_GetMember_Handler,
		},
		{
			MethodName: "SetUser",
			Handler:    _State_SetUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _State_GetUser_Handler,
		},
		{
			MethodName: "SetMessage",
			Handler:    _State_SetMessage_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _State_GetMessage_Handler,
		},
		{
			MethodName: "SetRole",
			Handler:    _State_SetRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _State_GetRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "state.proto",
}

func init() { proto.RegisterFile("state.proto", fileDescriptor_state_42f6695253f6e029) }

var fileDescriptor_state_42f6695253f6e029 = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x53, 0xa4, 0x52, 0x70, 0xe9, 0x62, 0x89, 0x52, 0x2a, 0xe4, 0x81, 0x07, 0xe8, 0x00,
	0x1b, 0x12, 0x12, 0xa2, 0x42, 0x37, 0x75, 0xa9, 0xc5, 0xc2, 0xd6, 0xc2, 0xa9, 0x14, 0x25, 0x75,
	0x89, 0xdd, 0xa7, 0x60, 0xe1, 0xb1, 0x18, 0x3b, 0x32, 0xa2, 0xf6, 0x45, 0x90, 0xed, 0xa4, 0x71,
	0x6c, 0x67, 0xf3, 0xfd, 0xa7, 0xef, 0xff, 0xe3, 0xcb, 0x99, 0x74, 0xa5, 0x9a, 0x29, 0x1c, 0xad,
	0x73, 0xa1, 0x04, 0x6d, 0x9b, 0x62, 0xd8, 0x7b, 0x7d, 0x9f, 0xad, 0x56, 0x98, 0x5a, 0x75, 0xd8,
	0xc5, 0x4c, 0x7c, 0x2c, 0xcb, 0x62, 0xb1, 0x59, 0xa6, 0x6f, 0x45, 0x71, 0x96, 0x61, 0x36, 0xc7,
	0xbc, 0xa8, 0xc8, 0x46, 0x1e, 0xce, 0xbd, 0x0c, 0xa5, 0x9c, 0x2d, 0xb0, 0x6c, 0xe5, 0x22, 0x2d,
	0xce, 0x37, 0x5f, 0x1d, 0xd2, 0xe6, 0x3a, 0x87, 0x8e, 0x09, 0xe1, 0xa8, 0xc6, 0x36, 0x8c, 0x0e,
	0x46, 0xf6, 0x53, 0x2a, 0x69, 0x8a, 0x9f, 0x1b, 0x94, 0x6a, 0x78, 0x19, 0xe9, 0xc8, 0xb5, 0x58,
	0x49, 0xbc, 0x4e, 0xb4, 0x09, 0x84, 0x26, 0xd0, 0x68, 0x02, 0x31, 0x93, 0x7b, 0x72, 0xc2, 0x51,
	0x3d, 0xe9, 0x7b, 0xd2, 0x7e, 0x95, 0x66, 0x84, 0xd2, 0xe0, 0x22, 0xd0, 0x5d, 0x1c, 0x7c, 0x1c,
	0x1a, 0x70, 0x88, 0xe2, 0x1c, 0x15, 0xe8, 0xc1, 0xba, 0xe9, 0x46, 0x88, 0xa4, 0x17, 0xba, 0x97,
	0x5e, 0xc7, 0xa1, 0x01, 0x87, 0x10, 0x7f, 0x20, 0xa7, 0x1c, 0xd5, 0xc4, 0xfc, 0x49, 0xea, 0xc4,
	0x58, 0xa5, 0x34, 0x18, 0x84, 0x0d, 0xd7, 0x01, 0x02, 0x07, 0x68, 0x72, 0x80, 0x88, 0xc3, 0x1d,
	0xe9, 0x70, 0x54, 0xcf, 0x12, 0x73, 0x7a, 0x5e, 0x05, 0xe9, 0xba, 0xa4, 0xfb, 0xbe, 0xec, 0xb2,
	0xe0, 0xb1, 0x10, 0x67, 0x21, 0x60, 0xed, 0x06, 0x4e, 0xec, 0xae, 0xd2, 0xda, 0x1d, 0x8d, 0x14,
	0xd9, 0xc0, 0x43, 0xc7, 0xdb, 0x40, 0xdf, 0x04, 0x1a, 0x4d, 0x20, 0x66, 0x62, 0x27, 0x30, 0x15,
	0x29, 0xba, 0x13, 0xd0, 0x75, 0x64, 0x02, 0x56, 0xf6, 0x26, 0x50, 0x63, 0x21, 0xce, 0x82, 0xcf,
	0x3e, 0x5e, 0xfd, 0xec, 0x58, 0x6b, 0xbb, 0x63, 0xad, 0xbf, 0x1d, 0x6b, 0x7d, 0xef, 0x59, 0xb2,
	0xdd, 0xb3, 0xe4, 0x77, 0xcf, 0x92, 0x97, 0xa3, 0xf5, 0x7c, 0x7e, 0x6c, 0x9e, 0xec, 0xed, 0x7f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x24, 0x3e, 0x21, 0xf2, 0x26, 0x04, 0x00, 0x00,
}
