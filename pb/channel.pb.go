// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: channel.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ChannelChannelType int32

const (
	Channel_GUILD_TEXT     ChannelChannelType = 0
	Channel_DM             ChannelChannelType = 1
	Channel_GUILD_VOICE    ChannelChannelType = 2
	Channel_GROUP_DM       ChannelChannelType = 3
	Channel_GUILD_CATEGORY ChannelChannelType = 4
)

var ChannelChannelType_name = map[int32]string{
	0: "GUILD_TEXT",
	1: "DM",
	2: "GUILD_VOICE",
	3: "GROUP_DM",
	4: "GUILD_CATEGORY",
}
var ChannelChannelType_value = map[string]int32{
	"GUILD_TEXT":     0,
	"DM":             1,
	"GUILD_VOICE":    2,
	"GROUP_DM":       3,
	"GUILD_CATEGORY": 4,
}

func (x ChannelChannelType) String() string {
	return proto.EnumName(ChannelChannelType_name, int32(x))
}
func (ChannelChannelType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_channel_57906dd3cd0054fd, []int{0, 0}
}

type Channel struct {
	Id         string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GuildId    string                         `protobuf:"bytes,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Name       string                         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Topic      string                         `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	Nsfw       bool                           `protobuf:"varint,5,opt,name=nsfw,proto3" json:"nsfw,omitempty"`
	Position   int32                          `protobuf:"varint,6,opt,name=position,proto3" json:"position,omitempty"`
	Bitrate    int32                          `protobuf:"varint,7,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	Overwrites []*Channel_PermissionOverwrite `protobuf:"bytes,8,rep,name=overwrites" json:"overwrites,omitempty"`
	ParentId   string                         `protobuf:"bytes,9,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
}

func (m *Channel) Reset()         { *m = Channel{} }
func (m *Channel) String() string { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()    {}
func (*Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_channel_57906dd3cd0054fd, []int{0}
}
func (m *Channel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Channel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Channel.Merge(dst, src)
}
func (m *Channel) XXX_Size() int {
	return m.Size()
}
func (m *Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_Channel proto.InternalMessageInfo

func (m *Channel) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Channel) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

func (m *Channel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Channel) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Channel) GetNsfw() bool {
	if m != nil {
		return m.Nsfw
	}
	return false
}

func (m *Channel) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *Channel) GetBitrate() int32 {
	if m != nil {
		return m.Bitrate
	}
	return 0
}

func (m *Channel) GetOverwrites() []*Channel_PermissionOverwrite {
	if m != nil {
		return m.Overwrites
	}
	return nil
}

func (m *Channel) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

type Channel_PermissionOverwrite struct {
	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Deny  int32  `protobuf:"varint,3,opt,name=deny,proto3" json:"deny,omitempty"`
	Allow int32  `protobuf:"varint,4,opt,name=allow,proto3" json:"allow,omitempty"`
}

func (m *Channel_PermissionOverwrite) Reset()         { *m = Channel_PermissionOverwrite{} }
func (m *Channel_PermissionOverwrite) String() string { return proto.CompactTextString(m) }
func (*Channel_PermissionOverwrite) ProtoMessage()    {}
func (*Channel_PermissionOverwrite) Descriptor() ([]byte, []int) {
	return fileDescriptor_channel_57906dd3cd0054fd, []int{0, 0}
}
func (m *Channel_PermissionOverwrite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Channel_PermissionOverwrite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Channel_PermissionOverwrite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Channel_PermissionOverwrite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Channel_PermissionOverwrite.Merge(dst, src)
}
func (m *Channel_PermissionOverwrite) XXX_Size() int {
	return m.Size()
}
func (m *Channel_PermissionOverwrite) XXX_DiscardUnknown() {
	xxx_messageInfo_Channel_PermissionOverwrite.DiscardUnknown(m)
}

var xxx_messageInfo_Channel_PermissionOverwrite proto.InternalMessageInfo

func (m *Channel_PermissionOverwrite) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Channel_PermissionOverwrite) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Channel_PermissionOverwrite) GetDeny() int32 {
	if m != nil {
		return m.Deny
	}
	return 0
}

func (m *Channel_PermissionOverwrite) GetAllow() int32 {
	if m != nil {
		return m.Allow
	}
	return 0
}

type SetChannelRequest struct {
	Channel *Channel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
}

func (m *SetChannelRequest) Reset()         { *m = SetChannelRequest{} }
func (m *SetChannelRequest) String() string { return proto.CompactTextString(m) }
func (*SetChannelRequest) ProtoMessage()    {}
func (*SetChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_channel_57906dd3cd0054fd, []int{1}
}
func (m *SetChannelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetChannelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SetChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetChannelRequest.Merge(dst, src)
}
func (m *SetChannelRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetChannelRequest proto.InternalMessageInfo

func (m *SetChannelRequest) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

type SetChannelResponse struct {
}

func (m *SetChannelResponse) Reset()         { *m = SetChannelResponse{} }
func (m *SetChannelResponse) String() string { return proto.CompactTextString(m) }
func (*SetChannelResponse) ProtoMessage()    {}
func (*SetChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_channel_57906dd3cd0054fd, []int{2}
}
func (m *SetChannelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetChannelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SetChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetChannelResponse.Merge(dst, src)
}
func (m *SetChannelResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetChannelResponse proto.InternalMessageInfo

type GetChannelRequest struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GuildId string `protobuf:"bytes,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
}

func (m *GetChannelRequest) Reset()         { *m = GetChannelRequest{} }
func (m *GetChannelRequest) String() string { return proto.CompactTextString(m) }
func (*GetChannelRequest) ProtoMessage()    {}
func (*GetChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_channel_57906dd3cd0054fd, []int{3}
}
func (m *GetChannelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChannelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChannelRequest.Merge(dst, src)
}
func (m *GetChannelRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetChannelRequest proto.InternalMessageInfo

func (m *GetChannelRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetChannelRequest) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

type GetChannelResponse struct {
	Channel *Channel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
}

func (m *GetChannelResponse) Reset()         { *m = GetChannelResponse{} }
func (m *GetChannelResponse) String() string { return proto.CompactTextString(m) }
func (*GetChannelResponse) ProtoMessage()    {}
func (*GetChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_channel_57906dd3cd0054fd, []int{4}
}
func (m *GetChannelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChannelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChannelResponse.Merge(dst, src)
}
func (m *GetChannelResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetChannelResponse proto.InternalMessageInfo

func (m *GetChannelResponse) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func init() {
	proto.RegisterType((*Channel)(nil), "state.Channel")
	proto.RegisterType((*Channel_PermissionOverwrite)(nil), "state.Channel.PermissionOverwrite")
	proto.RegisterType((*SetChannelRequest)(nil), "state.SetChannelRequest")
	proto.RegisterType((*SetChannelResponse)(nil), "state.SetChannelResponse")
	proto.RegisterType((*GetChannelRequest)(nil), "state.GetChannelRequest")
	proto.RegisterType((*GetChannelResponse)(nil), "state.GetChannelResponse")
	proto.RegisterEnum("state.ChannelChannelType", ChannelChannelType_name, ChannelChannelType_value)
}
func (m *Channel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Channel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannel(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.GuildId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannel(dAtA, i, uint64(len(m.GuildId)))
		i += copy(dAtA[i:], m.GuildId)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannel(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Topic) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChannel(dAtA, i, uint64(len(m.Topic)))
		i += copy(dAtA[i:], m.Topic)
	}
	if m.Nsfw {
		dAtA[i] = 0x28
		i++
		if m.Nsfw {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Position != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Position))
	}
	if m.Bitrate != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Bitrate))
	}
	if len(m.Overwrites) > 0 {
		for _, msg := range m.Overwrites {
			dAtA[i] = 0x42
			i++
			i = encodeVarintChannel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ParentId) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintChannel(dAtA, i, uint64(len(m.ParentId)))
		i += copy(dAtA[i:], m.ParentId)
	}
	return i, nil
}

func (m *Channel_PermissionOverwrite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Channel_PermissionOverwrite) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannel(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannel(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Deny != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Deny))
	}
	if m.Allow != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Allow))
	}
	return i, nil
}

func (m *SetChannelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetChannelRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Channel.Size()))
		n1, err := m.Channel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *SetChannelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetChannelResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetChannelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannel(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.GuildId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannel(dAtA, i, uint64(len(m.GuildId)))
		i += copy(dAtA[i:], m.GuildId)
	}
	return i, nil
}

func (m *GetChannelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Channel.Size()))
		n2, err := m.Channel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeVarintChannel(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Channel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	if m.Nsfw {
		n += 2
	}
	if m.Position != 0 {
		n += 1 + sovChannel(uint64(m.Position))
	}
	if m.Bitrate != 0 {
		n += 1 + sovChannel(uint64(m.Bitrate))
	}
	if len(m.Overwrites) > 0 {
		for _, e := range m.Overwrites {
			l = e.Size()
			n += 1 + l + sovChannel(uint64(l))
		}
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	return n
}

func (m *Channel_PermissionOverwrite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	if m.Deny != 0 {
		n += 1 + sovChannel(uint64(m.Deny))
	}
	if m.Allow != 0 {
		n += 1 + sovChannel(uint64(m.Allow))
	}
	return n
}

func (m *SetChannelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovChannel(uint64(l))
	}
	return n
}

func (m *SetChannelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetChannelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	return n
}

func (m *GetChannelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovChannel(uint64(l))
	}
	return n
}

func sovChannel(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChannel(x uint64) (n int) {
	return sovChannel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Channel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Channel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Channel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nsfw", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Nsfw = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bitrate", wireType)
			}
			m.Bitrate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bitrate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overwrites", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Overwrites = append(m.Overwrites, &Channel_PermissionOverwrite{})
			if err := m.Overwrites[len(m.Overwrites)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Channel_PermissionOverwrite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PermissionOverwrite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PermissionOverwrite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deny", wireType)
			}
			m.Deny = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deny |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allow", wireType)
			}
			m.Allow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Allow |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetChannelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetChannelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetChannelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &Channel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetChannelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetChannelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetChannelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &Channel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChannel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChannel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChannel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChannel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChannel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChannel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChannel   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("channel.proto", fileDescriptor_channel_57906dd3cd0054fd) }

var fileDescriptor_channel_57906dd3cd0054fd = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xc1, 0x6e, 0xd3, 0x40,
	0x14, 0x8c, 0x9d, 0x38, 0x76, 0x5e, 0x4a, 0x70, 0x1f, 0x3d, 0x2c, 0x05, 0x59, 0x91, 0x4f, 0x3e,
	0xe5, 0x50, 0xce, 0x54, 0xa2, 0x49, 0x64, 0x45, 0xa2, 0x4a, 0xb5, 0xa4, 0x88, 0x72, 0x89, 0x9c,
	0x78, 0x81, 0x95, 0x5c, 0xaf, 0xf1, 0x6e, 0x89, 0xfa, 0x17, 0x7c, 0x16, 0xdc, 0x7a, 0xe4, 0x88,
	0x92, 0x1f, 0x41, 0x79, 0x76, 0x50, 0x51, 0x38, 0xe4, 0xf6, 0x66, 0x66, 0x67, 0xbd, 0x33, 0x7e,
	0xf0, 0x64, 0xf9, 0x25, 0xc9, 0x73, 0x91, 0x0d, 0x8a, 0x52, 0x19, 0x85, 0x8e, 0x36, 0x89, 0x11,
	0xe1, 0xcf, 0x26, 0xb8, 0xc3, 0x4a, 0xc0, 0x1e, 0xd8, 0x32, 0x65, 0x56, 0xdf, 0x8a, 0x3a, 0xdc,
	0x96, 0x29, 0x3e, 0x07, 0xef, 0xf3, 0x9d, 0xcc, 0xd2, 0xb9, 0x4c, 0x99, 0x4d, 0xac, 0x4b, 0x78,
	0x92, 0x22, 0x42, 0x2b, 0x4f, 0x6e, 0x05, 0x6b, 0x12, 0x4d, 0x33, 0x9e, 0x80, 0x63, 0x54, 0x21,
	0x97, 0xac, 0x45, 0x64, 0x05, 0xe8, 0xa4, 0xfe, 0xb4, 0x62, 0x4e, 0xdf, 0x8a, 0x3c, 0x4e, 0x33,
	0x9e, 0x82, 0x57, 0x28, 0x2d, 0x8d, 0x54, 0x39, 0x6b, 0xf7, 0xad, 0xc8, 0xe1, 0x7f, 0x31, 0x32,
	0x70, 0x17, 0xd2, 0x94, 0x89, 0x11, 0xcc, 0x25, 0x69, 0x07, 0xf1, 0x02, 0x40, 0x7d, 0x13, 0xe5,
	0xaa, 0x94, 0x46, 0x68, 0xe6, 0xf5, 0x9b, 0x51, 0xf7, 0x2c, 0x1c, 0x50, 0x8c, 0x41, 0x1d, 0x61,
	0x70, 0x25, 0xca, 0x5b, 0xa9, 0xb5, 0x54, 0xf9, 0x74, 0x77, 0x94, 0x3f, 0x72, 0xe1, 0x0b, 0xe8,
	0x14, 0x49, 0x29, 0x72, 0xb3, 0xcd, 0xd4, 0xa1, 0x77, 0x7a, 0x15, 0x31, 0x49, 0x4f, 0x97, 0xf0,
	0xec, 0x3f, 0xfe, 0xbd, 0x5a, 0x10, 0x5a, 0xe6, 0xbe, 0x10, 0x75, 0x25, 0x34, 0x6f, 0xb9, 0x54,
	0xe4, 0xf7, 0xd4, 0x87, 0xc3, 0x69, 0xde, 0xf6, 0x91, 0x64, 0x99, 0x5a, 0x51, 0x1f, 0x0e, 0xaf,
	0x40, 0x78, 0x03, 0x47, 0xf5, 0x8f, 0x98, 0x93, 0xb3, 0x07, 0x10, 0x5f, 0x4f, 0xde, 0x8e, 0xe6,
	0xb3, 0xf1, 0x87, 0x99, 0xdf, 0xc0, 0x36, 0xd8, 0xa3, 0x4b, 0xdf, 0xc2, 0xa7, 0xd0, 0xad, 0xf8,
	0xf7, 0xd3, 0xc9, 0x70, 0xec, 0xdb, 0x78, 0x04, 0x5e, 0xcc, 0xa7, 0xd7, 0x57, 0xf3, 0xd1, 0xa5,
	0xdf, 0x44, 0x84, 0x5e, 0x25, 0x0f, 0xdf, 0xcc, 0xc6, 0xf1, 0x94, 0xdf, 0xf8, 0xad, 0xf0, 0x35,
	0x1c, 0xbf, 0x13, 0xa6, 0xae, 0x82, 0x8b, 0xaf, 0x77, 0x42, 0x1b, 0x8c, 0xc0, 0xad, 0xbf, 0x47,
	0x11, 0xba, 0x67, 0xbd, 0x7f, 0x2b, 0xe3, 0x3b, 0x39, 0x3c, 0x01, 0x7c, 0x6c, 0xd7, 0x85, 0xca,
	0xb5, 0x08, 0xcf, 0xe1, 0x38, 0xde, 0xbb, 0xf4, 0xf0, 0x4d, 0x09, 0xcf, 0x01, 0xe3, 0xbd, 0x5b,
	0x0f, 0x7f, 0xd5, 0xc5, 0xcb, 0x1f, 0xeb, 0xc0, 0x7a, 0x58, 0x07, 0xd6, 0xef, 0x75, 0x60, 0x7d,
	0xdf, 0x04, 0x8d, 0x87, 0x4d, 0xd0, 0xf8, 0xb5, 0x09, 0x1a, 0x1f, 0xed, 0x62, 0xb1, 0x68, 0xd3,
	0x32, 0xbf, 0xfa, 0x13, 0x00, 0x00, 0xff, 0xff, 0x5a, 0xe8, 0xb0, 0xac, 0xdd, 0x02, 0x00, 0x00,
}
